// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LandingPage {
  id                  Int              @id @default(autoincrement())
  externalId          String           @unique
  tagline             String
  tagline_description String           @db.Text
  name                String
  description         String           @db.Text
  cover_image_url     String?
  profile_pic_url     String?
  socials             Social[]
  reviews             Review[]
  keyPoints           KeyPoints[]
  faq                 Faq[]
  sessions            SessionDetails[]
  orders              Orders[]
}

model Social {
  id            Int         @id @default(autoincrement())
  name          String
  url           String      @unique
  landingPageId Int
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Review {
  id            Int         @id @default(autoincrement())
  videourl      String
  landingPageId Int
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model KeyPoints {
  id            Int         @id @default(autoincrement())
  title         String
  landingPageId Int
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Faq {
  id            Int         @id @default(autoincrement())
  question      String
  answer        String
  landingPageId Int
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model RequestingArtist {
  id             Int      @id @default(autoincrement())
  name           String
  stage_name     String
  phonenumber    String   @unique
  description    String
  email          String
  genre          String
  request_status String   @default("pending")
  created_at     DateTime @default(now())
}

model SessionDetails {
  id             Int         @id @default(autoincrement())
  slots_details  Json
  slot_available Int
  session_price  Int         @default(15)
  discount       Int         @default(0)
  landingPageId  Int
  landingPage    LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt
}

model Orders {
  id             Int         @id @default(autoincrement())
  customer_email String
  bill_amount    Int
  zoom_link      String
  artist_name    String
  session_detail String      @db.Text
  landingPageId  Int
  landingPage    LandingPage @relation(fields: [landingPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
